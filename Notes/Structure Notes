Prog2 Notes


Typedef char String [20];;    <<==== "String" is a new data type changes from "char"

Typedef struct{                  <=== old type
  Stirng lname, fname;
}Name;                        <=== New type

typedef struct{
  int id;
  Name name;                   <== consist of 2nd typedef variables (lname, fname);
  char sex;
}Student;


ex. in main

Student s;
s.id = 1000;

strcpy(s.name.lname, "yu");      <== Needs to strcpy if assigning to other variable with other structures (accessing Name name to another struct) s.name(NAME) .lname
strcpy(s.name.lname, "yu");      <== ^^^^^^^^^^^^^^^^^^^^^^^^




    Person people[10];
    int n_people = 0;
    memset(people, 0, sizeof(Person) * 10);      <==== same like calloc, it inializes all into zero 0


typedef struct {
    String fname;
    String lname;
} Name, *NameList, NameArray[MAX];


    // Example using Name
    Name person1;
    strcpy(person1.fname, "John");
    strcpy(person1.lname, "Doe");
    printf("Name: %s %s\n", person1.fname, person1.lname);

    // Example using NameList (pointer to Name)
    Name person2;
    NameList list = &person2;
    strcpy(list->fname, "Jane");
    strcpy(list->lname, "Smith");
    printf("NameList: %s %s\n", list->fname, list->lname);

    // Example using NameArray (array of Name structures)
    NameArray people = {
        {"Alice", "Johnson"},
        {"Bob", "Smith"},
        {"Carol", "Jones"}
    };

    printf("NameArray:\n");
    for (int i = 0; i < MAX; i++) {
        printf("%s %s\n", people[i].fname, people[i].lname);
    }
